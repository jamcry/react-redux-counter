{"version":3,"sources":["CounterActions.js","actions.js","Counter.js","App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["CounterActions","className","onClick","props","incrementCount","this","resetCount","decrementCount","style","width","height","ref","color","type","onChange","setColor","value","React","Component","connect","dispatch","amount","Counter","count","state","ownProps","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAIMA,E,iLACM,IAAD,OACP,OACE,yBAAKC,UAAU,IACb,6BACA,4BAAQA,UAAU,6BAA6BC,QAAS,kBAAM,EAAKC,MAAMC,eAAe,KAAI,uBAAGH,UAAU,uBACxG,IACD,4BAAQA,UAAU,6BAA6BC,QAASG,KAAKF,MAAMG,YAAY,uBAAGL,UAAU,oBAC3F,IACD,4BAAQA,UAAU,4BAA4BC,QAAS,kBAAM,EAAKC,MAAMI,eAAe,KAAI,uBAAGN,UAAU,wBACxG,6BACA,6CACA,2BAAOA,UAAU,2BAA2BO,MAAO,CAACC,MAAM,OAAQC,OAAQ,UAAWC,IAAK,SAAAC,GAAK,OAAE,EAAKA,MAAMA,GAAOC,KAAK,QAAQC,SAAU,kBAAM,EAAKX,MAAMY,SAAS,EAAKH,MAAMI,e,GAZ1JC,IAAMC,WA4BpBC,cAAQ,MAVI,SAACC,GAC1B,MAAO,CACLhB,eAAgB,SAACiB,GAAaD,ECxBJ,SAACC,GAC7B,MAAO,CACLR,KAAM,kBAAmBQ,UDsBcjB,CAAeiB,KACtDd,eAAgB,SAACc,GAAaD,ECnBJ,SAACC,GAC7B,MAAO,CACLR,KAAM,kBAAmBQ,UDiBcd,CAAec,KACtDf,WAAgB,WAAcc,ECbzB,CACLP,KAAM,iBDaNE,SAAgB,SAACH,GAAaQ,ECTV,SAACR,GACvB,MAAO,CACLC,KAAM,YAAaD,SDOoBG,CAASH,QAKrCO,CAAkCnB,G,kOE7B3CsB,E,iLAEF,OACE,6BACE,6BAASrB,UAAU,kCACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,SACS,IACP,0BAAMO,MAAO,CAAEI,MAAOP,KAAKF,MAAMS,QAC9BP,KAAKF,MAAMoB,QAGhB,wBAAItB,UAAU,YAAd,eAAsCI,KAAKF,MAAMS,QAEnD,kBAAC,EAAD,a,GAfUK,IAAMC,WAgCbC,eATS,SAACK,EAAOC,GAC9B,O,yVAAO,CAAP,GACKA,EADL,CAEEF,MAAOC,EAAMD,MACbX,MAAOY,EAAMZ,UAKFO,CAEbG,GC3BaI,MARf,WACE,OACE,yBAAKzB,UAAU,aACb,kBAAC,EAAD,QCOc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,okBClBN,IAAMC,EAAe,CACnBT,MAAO,EACPX,MAAO,QCGMqB,EAFDC,aDEa,WAAkC,IAAjCV,EAAgC,uDAAxBQ,EAAcG,EAAU,uCAC1D,OAAOA,EAAOtB,MACZ,IAAK,kBACH,OAAO,KACFW,EADL,CAEED,MAAOC,EAAMD,MAAQY,EAAOd,SAEhC,IAAK,kBACH,OAAO,KACFG,EADL,CAEED,MAAOC,EAAMD,MAAQY,EAAOd,SAEhC,IAAK,cACH,OAAO,KACFG,EADL,CAEED,MAAO,IAEX,IAAK,YACH,OAAO,KACFC,EADL,CAEEZ,MAAOuB,EAAOvB,QAElB,QACE,OAAOY,MEpBbY,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAOA,GAAO,kBAAC,EAAD,OAAoBK,SAASC,eAAe,SHyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9a5078a8.chunk.js","sourcesContent":["import React from 'react'\nimport { incrementCount, decrementCount, resetCount, setColor } from \"./actions\";\nimport { connect } from \"react-redux\"\n\nclass CounterActions extends React.Component {\n  render() {\n    return (\n      <div className=\"\">\n        <hr/>\n        <button className=\"button is-large is-success\" onClick={() => this.props.incrementCount(1)}><i className=\"fa fa-plus-circle\" /></button>\n        {\" \"}\n        <button className=\"button is-large is-warning\" onClick={this.props.resetCount}><i className=\"fa fa-undo-alt\" /></button>\n        {\" \"}\n        <button className=\"button is-large is-danger\" onClick={() => this.props.decrementCount(1)}><i className=\"fa fa-minus-circle\" /></button>\n        <hr/>\n        <b>Change Color: </b>\n        <input className=\"button is-medium is-info\" style={{width:\"6rem\", height: \"1.5rem\"}} ref={color=>this.color=color} type=\"color\" onChange={() => this.props.setColor(this.color.value)} />\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    incrementCount: (amount) => { dispatch(incrementCount(amount)) },\n    decrementCount: (amount) => { dispatch(decrementCount(amount)) },\n    resetCount    : ()       => { dispatch(resetCount())}, \n    setColor      : (color)  => { dispatch(setColor(color))}\n  }\n}\n\n// Connect only with mapDispatchToProps (mapStateToProps is null)\nexport default connect(null, mapDispatchToProps)(CounterActions);","export const incrementCount = (amount) => {\n  return {\n    type: \"INCREMENT_COUNT\", amount\n  }\n};\n\nexport const decrementCount = (amount) => {\n  return {\n    type: \"DECREMENT_COUNT\", amount\n  }\n}\n\nexport const resetCount = () => {\n  return {\n    type: \"RESET_COUNT\"\n  }\n}\n\nexport const setColor = (color) => {\n  return {\n    type: \"SET_COLOR\", color\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport CounterActions from \"./CounterActions\";\nclass Counter extends React.Component {\n  render() {\n    return (\n      <div>\n        <section className=\"hero is-dark has-text-centered\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">\n                Count:{\" \"}\n                <span style={{ color: this.props.color }}>\n                  {this.props.count}\n                </span>\n              </h1>\n              <h2 className=\"subtitle\">Color Code: {this.props.color}</h2>\n            </div>\n            <CounterActions />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    ...ownProps,\n    count: state.count,\n    color: state.color\n  };\n};\n\n\nexport default connect(\n  mapStateToProps,\n)(Counter);\n","import React from 'react';\nimport Counter from \"./Counter\";\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  count: 0,\n  color: \"#fff\",\n}\n\nexport const rootReducer = (state = initialState, action) =>{\n  switch(action.type) {\n    case \"INCREMENT_COUNT\":\n      return {\n        ...state,\n        count: state.count + action.amount\n      }\n    case \"DECREMENT_COUNT\":\n      return {\n        ...state,\n        count: state.count - action.amount\n      }\n    case \"RESET_COUNT\":\n      return {\n        ...state,\n        count: 0\n      }\n    case \"SET_COLOR\":\n      return {\n        ...state,\n        color: action.color\n      }\n    default:\n      return state;\n  }\n}","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}